<?xml version="1.0" encoding="UTF-8"?>

<!-- ====================================================================== -->
<!--  Apache Ant build script for building the Robocode setup file          -->
<!-- ====================================================================== -->

<project name="build" default="build">
  <description>Apache Ant build script for building the Robocode setup file</description>
  
  <!-- ====================================== -->
  <!-- Global properties                      -->
  <!-- ====================================== -->

  <!-- Read out the version from the versions.txt -->
  <loadfile property="version" srcfile="../robocode/resources/versions.txt">
    <filterchain>
      <headfilter lines="1"/>
      <replacestring from="Version " to=""/>
      <replacestring from=" " to="-"/>
      <striplinebreaks/>
    </filterchain>
  </loadfile>

  <!-- Disable debug information when compiling -->  
  <property name="debug" value="off"/>  <!-- Debug information is stripped from the setup file -->

  <!-- The build folder -->
  <property name="build" location="build"/>

  <!-- The source folders -->
  <property name="src.robocode" location="../robocode"/>
  <property name="src.extract" location="../robocodeextract"/>
  <property name="src.autoextract" location="../autoextract"/>
  <property name="src.robots" location="../robocodeextract/robots"/>

  <!-- License file -->
  <property name="license.file" location="${src.extract}/license/cpl-v10.html"/>
  <property name="versions.file" location="${src.robocode}/resources/versions.txt"/>

  <!-- The output setup file -->
  <property name="setup.filename" value="robocode-setup-${version}.jar"/>
  <property name="setup.file" location="${build}/${setup.filename}"/>

  <!-- ====================================== -->
  <!-- Default Excludes                       -->
  <!-- ====================================== -->

  <defaultexcludes add="build.xml"/>	 <!-- Ant build scripts -->
  <defaultexcludes add="**/.*/**"/>      <!-- Eclipse configuration folders -->
  <defaultexcludes add="**/*.bak"/>      <!-- Windows backup files -->
  <defaultexcludes add="**/Thumbs.db"/>  <!-- Windows thumbs databases -->
  <defaultexcludes add="**/~*"/>         <!-- Unix backup files -->
  <defaultexcludes add="**/.*"/>         <!-- Hidden unix file types -->
  
  <!-- ====================================== -->
  <!-- Target: init                           -->
  <!-- ====================================== -->
  <target
      name="init"
      description="Initializes the build">

  	<echo message="Initializes the build..."/>

  	<!-- Create folder for containing build files -->
  	<mkdir dir="${build}"/>
  </target>

  <!-- ====================================== -->
  <!-- Target: build                          -->
  <!-- ====================================== -->
  <target
      name="build"
      description="Build the Robocode setup file"
      depends="clean, extract.jar, compile.autoextract">

    <echo message="Building Robocode setup file (${setup.filename})..."/>

    <!-- Create the Robocode setup file -->
	<jar destfile="${setup.file}">
      <!-- Specify files to include -->
      <fileset dir="${build}" includes="robocode/AutoExtract.class"/>  <!-- Auto extract class -->
      <fileset file="${license.file}"/>       <!-- License file -->
      <fileset file="${build}/extract.jar"/>  <!-- extract.jar file -->
      <!-- Set the main class of the manifest -->
      <manifest>
        <attribute name="Main-Class" value="robocode.AutoExtract"/>
      </manifest>
    </jar>
  </target>

  <!-- ====================================== -->
  <!-- Target: compile.robocode               -->
  <!-- ====================================== -->
  <target
      name="compile.robocode"
      description="Compile robocode"
  	  depends="init"
      unless="robocode.uptodate"> 

    <echo message="Compiling robocode..."/>
 
    <!-- Compile robocode -->
    <compile srcdir="${src.robocode}" destdir="${build}"/>

    <!-- Flag that robocode has been built -->
    <touch file="${build}/.robocode_build"/>
  </target>

  <uptodate property="robocode.uptodate" targetfile="${build}/.robocode_build">
    <srcfiles dir="${src.robocode}/robocode"/>
  </uptodate>

  <!-- ====================================== -->
  <!-- Target: compile.robots                 -->
  <!-- ====================================== -->
  <target
      name="compile.robots"
      description="Compile robots"
      depends="init, compile.robocode"
      unless="robots.uptodate">

    <echo message="Compiling robots..."/>

    <!-- Compile robots -->
    <compile srcdir="${src.extract}/robots" destdir="${build}/robots" classpath="${build}"/>

    <!-- Flag that robots have been built -->
    <touch file="${build}/.robots_build"/>
  </target>

  <uptodate property="robots.uptodate" targetfile="${build}/.robots_build">
    <srcfiles dir="${src.robots}"/>
  </uptodate>

  <!-- ====================================== -->
  <!-- Target: compile.autoextract            -->
  <!-- ====================================== -->
  <target
      name="compile.autoextract"
      description="Compile auto-extract"
  	  depends="init"
      unless="autoextract.uptodate">

    <echo message="Compiling auto-extract..."/>

    <!-- Compile auto-extract -->
    <compile srcdir="${src.autoextract}" destdir="${build}"/>
  </target>

  <uptodate property="autoextract.uptodate" targetfile="${build}/robocode/AutoExtract.class">
    <srcfiles dir="${src.autoextract}"/>
  </uptodate>

  <!-- ====================================== -->
  <!-- Target: robocode.jar                   -->
  <!-- ====================================== -->
  <target
      name="robocode.jar"
      description="Build robocode.jar"
      depends="init, compile.robocode"
      unless="robocode.jar.uptodate">

    <echo message="Building robocode.jar..."/>

    <!-- Create the robocode.jar file -->
    <jar destfile="${build}/robocode.jar">
      <!-- Specify files to include -->
      <fileset dir="${build}" includes="robocode/**">   <!-- Class files -->
        <exclude name="robocode/AutoExtract.class"/>				 <!-- Exclude AutoExtract.class -->
      </fileset>
      <fileset dir="${src.robocode}" includes="resources/**"/>  <!-- Resource files -->
      <fileset file="${license.file}"/>                         <!-- License file -->
      <!-- Set the main class of the manifest -->
      <manifest>
        <attribute name="Main-Class" value="robocode.Robocode"/>
      </manifest>
    </jar>
  </target>

  <uptodate property="robocode.jar.uptodate" targetfile="${build}/robocode.jar">
    <srcfiles dir="${src.robocode}"/>
  </uptodate>

  <!-- ====================================== -->
  <!-- Target: extract.jar                    -->
  <!-- ====================================== -->
  <target
      name="extract.jar"
      description="Build extract.jar"
      depends="init, robocode.jar, javadoc, compile.robots"
      unless="extract.jar.uptodate">

    <echo message="Building extract.jar..."/>

    <!-- Create the extract.jar file -->
    <jar destfile="${build}/extract.jar">
      <!-- Specify files to include -->
      <fileset dir="${src.extract}">      <!-- Files from the extract folder -->
        <exclude name="build/**"/>             <!-- Exclude build files (if any) -->
      </fileset>
      <fileset dir="${build}">
        <include name="robocode.jar"/>    <!-- Builded robocode.jar file -->
        <include name="javadoc/**"/>      <!-- Builded javadoc files -->
        <include name="robots/**"/>       <!-- Builded robots -->
      </fileset>
      <fileset file="${versions.file}"/>  <!-- Versions file -->
      <fileset file="${license.file}"/>   <!-- License file -->
    </jar>
  </target>

  <uptodate property="extract.jar.uptodate" targetfile="${build}/extract.jar">
    <srcfiles dir="${src.extract}" excludes="build/**"/>
  </uptodate>

  <!-- ====================================== -->
  <!-- Target: javadoc                        -->
  <!-- ====================================== -->
  <target
      name="javadoc"
      description="Generate javadoc"
  	  depends="init"
      unless="javadoc.uptodate">

    <echo message="Generating javadoc..."/>

    <!-- Generate the javadoc documentation -->
    <javadoc
        destdir="${build}/javadoc"
        sourcepath="${src.robocode}"
        packagenames="robocode"
        windowtitle="Robocode ${version} API"/>
    
    <!-- Flag that javadoc has been built -->
    <touch file="${build}/.javadoc_build"/>
  </target>

  <uptodate property="javadoc.uptodate" targetfile="${build}/.javadoc_build">
    <srcfiles dir="${src.robocode}" includes="**/*.java"/>
  </uptodate>

  <!-- ====================================== -->
  <!-- Target: install                        -->
  <!-- ====================================== -->
  <target
      name="install"
      description="Install Robocode"
      depends="build">

    <echo message="Installing Robocode..."/>

    <!-- Run the Robocode setup file -->
    <java jar="${setup.file}" fork="true"/>
  </target>

  <!-- ====================================== -->
  <!-- Target: quick-install                  -->
  <!-- ====================================== -->
  <target
      name="quick-install"
      description="Quick install Robocode"
      depends="extract.jar">

    <echo message="Quick-installing Robocode..."/>

    <!-- Ask user where to install Robocode -->
    <input
        message="To which folder do you want to install Robocode?"
        addproperty="install.dir"/>

    <!-- Create the installation folder -->
    <mkdir dir="${install.dir}"/>

    <!-- Extract the extract.jar into the installation folder -->
    <unjar src="${build}/extract.jar" dest="${install.dir}"/>
  </target>

  <!-- Clean up all build files -->
  <target
      name="clean"
      description="Clean up build files">

    <echo message="Cleaning up build files..."/>

    <!-- Delete the folder containing all build files -->
    <delete dir="${build}"/>
  </target>

  <!-- ====================================== -->
  <!-- Macro: compile                         -->
  <!-- ====================================== -->
  <macrodef name="compile">
    <attribute name="srcdir"/>
    <attribute name="destdir"/>
    <attribute name="classpath" default=""/>
    <sequential>
      <!-- Create folder for class files -->
      <mkdir dir="@{destdir}"/>
      <!-- Compile the sources -->
      <javac
          srcdir="@{srcdir}"
          destdir="@{destdir}"
          classpath="@{classpath}"
          source="1.5"
          target="1.5"
          debug="${debug}"
          debuglevel="lines,vars,source"
          optimize="true"
          includes="**/*.java"
      />
    </sequential>
  </macrodef>

</project>