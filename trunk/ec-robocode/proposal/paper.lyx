#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass article
\begin_preamble
\author{Ronald Bowers \& Jason Owens}
\title{Coevolution of Human-Competitive Robocode Tanks Using Genetic Programming with Exogenous Fitness}
\end_preamble
\language english
\inputencoding auto
\fontscheme ae
\graphics default
\paperfontsize default
\spacing single 
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 1
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 2
\papersides 1
\paperpagestyle default

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
maketitle
\end_inset 


\layout Section

Introduction 
\layout Standard

Coevolution appears to be a useful way of evolving game-playing agents.
 Historically, not often successful in games where there is a cost to taking
 action, or risk One issue that has consistently hindered the use of coevolution
 in the development of combat game playing agents is that of the "mediocre
 steady-state" [Ben-Gurion Guys], [Pollack], [Sheppard].
 The "mediocre stable state" is a state where the population consists of
 members who do absolutely nothing.
 This phenemonen occurs because the...
\layout Section

Hypothesis
\layout Standard

We hypothesize that using GP and coevolution, and by applying an exogenous
 fitness function based on victories, we can evolve Robocode players that
 can compete successfully against the best human-designed robots.
 So, the exogenous[?]
\layout Section

Related Work
\layout Subsection

Coevolution
\layout Standard

In general, coevolution refers to an evolutionary process that includes
 two or more populations
\begin_inset LatexCommand \cite{koza1991eac}

\end_inset 

.
 When determining the fitness of a member in one population, the environment
 includes the members of the other population(s).
 In EC, There are single population coevolution
\layout Standard

In 
\begin_inset LatexCommand \cite{angeline93competitive}

\end_inset 

, Angeline and Pollock argue that competitive fitness functions are more
 effective than independent fitness functions.
 A competitive fitness function is considered to be any calculation of fitness
 that is dependent on the current state of the population, rather than relative
 to a global optimum.
 Generally, competitive fitness is measured through competition between
 population members.
 These competitions can range from testing each member against each other
 to a carefully structured tournament 
\begin_inset LatexCommand \cite{angeline93competitive}

\end_inset 

.
 
\layout Standard

Unfortunately, there are several potential drawbacks to a coevolutionary
 approach.
 The most frequently cited is the 
\begin_inset Quotes eld
\end_inset 

mediocre stable state.
\begin_inset Quotes erd
\end_inset 

 
\layout Standard

Must maintain balance in the arms race, otherwise one challenger will be
 unable to offer continued opposition.
 Mediocre steady state is a form of collusion.
 WWI originally found in Axelrod? The environment should netirher be too
 difficult nor too easy.
 The population members must be stressed to improve, but not so overwhelmed
 that they fail constantly.
 They found the open-ended coevolution is not necessarily synomous with
 a purely competive framework.
 They found it necessary to provide a mixture of competitive and cooperative
 pressures in order to avoid the mss
\begin_inset LatexCommand \cite{ficici98challenges}

\end_inset 

.
\layout Standard

To avoid the 
\layout Subsection

Genetic Programming
\layout Standard

Automatic Programming of Robots using Genetic Programming
\layout Standard

In [] Koza and Rice lay out he fundamental approach to genetic programming.
 1.
 Generate an initial population of random composistion, i.e.
 programs.
 2.
 Iterate until complete a.
 execute each program b.
 create a new population via reproduction and crossover.
\layout Subsection

Robocode-based Investigations
\layout Standard

There have been several projects which have attempted to evolve robocode
 combatants 
\begin_inset LatexCommand \cite{Eisenstein:2003wd,Hong:2004rr,Shichel:2005eu}

\end_inset 

.
 
\layout Standard

In 
\begin_inset LatexCommand \cite{Hong:2004rr}

\end_inset 

, Hong and Cho used a GA that consisted of six chromosomes, each of which
 had six genes.
 The chromosomes were related to the behavior that the tank would exhibit
 in the main loop, and in five of the event handlers.
 Each gene corresponded to a specific action of the tank, for eample 
\emph on 
move
\emph default 
 and 
\emph on 
shoot
\emph default 
.
 For each action, two or more strategies were developed.
 The implementation of the strategies were hand-coded.
 They were able to 
\layout Section

Approach
\layout Standard

Ignoring the warnings of others, we plan to carry through and explore the
 experiment using genetic programming and coevolution in this rather 
\begin_inset Quotes eld
\end_inset 

open-ended
\begin_inset Quotes erd
\end_inset 

 domain.
 Previous research in evolving Robocode agents reported failure when pursuing
 a coevolutionary model, and thus they resorted to training against known
 quantities 
\begin_inset LatexCommand \cite{Eisenstein:2003wd,Shichel:2005eu}

\end_inset 

.
 However, in doing this, the danger of evolving specialized players unable
 to handle generalized situations (i.e.
 new players with different tactics) is increased; in fact, [one of them
 mentions this].
 From our point of view, coevolution is obviously more exciting; we believe
 that the lack of an appropriate exogenous fitness function is the primary
 reason the previous ventures failed during coevolution.
 As 
\begin_inset LatexCommand \cite{ficici98challenges}

\end_inset 

 states: 
\begin_inset Quotes eld
\end_inset 

[t]he key to successful coevolutionary learning is a competitive arms race
 between opposed participants.
 Competitors must be well-matched in skill to force each other to improve.
\begin_inset Quotes erd
\end_inset 

 We would like to add that competitors must also be sufficiently 
\emph on 
motivated
\emph default 
 in order to avoid the mediocre stable-states common to coevolution 
\begin_inset LatexCommand \cite{angeline93competitive,ficici98challenges,waters1999gpa}

\end_inset 

.
\layout Standard

Our implementation of coevolution follows that of the model described in
 
\begin_inset LatexCommand \cite{Luke:2002fk}

\end_inset 

: one-population coevolution, where single individuals within that population
 are paired up and pitted against every other individual to obtain an overall
 fitness value.
\layout Standard

As discussed in 
\begin_inset LatexCommand \cite{Luke:2002fk}

\end_inset 


\layout Standard

"Forest of GP trees" 
\layout Standard

Each tree corresponding to one of the events that a robot listens for.
 
\layout Standard

Returning to koza and rice, they define the five major steps using GP as
 determining:
\layout Enumerate

the set of terminals
\layout Enumerate

the set of functions 
\layout Enumerate

the fitness measure 
\layout Enumerate

the parameters and variables for controlling the run
\layout Enumerate

the criteria for designating a run and for terminating a run.
 
\layout Standard

As stated previously, our system is essentially open-ended, unless a member
 of the population is able to always defeat all opposition, both evolved
 and human-designed.
 Since this is not likely, the experiment will be terminated after some
 number of generations.
 The exact number will depend on our processing speed.
\layout Standard

Although Koza generally dismisses the need for mutation in GP, we believe
 that it is necessary to access some parts of the solution space.
 Consider an operator that takes a value, such as turnRight(degrees).
 The amount to turn is specified as an argument.
 Crossover and reproduction cannot explore how far to turn unless all parameter
 values are represented in the initial population.
 It is more practical to allow mutation of such parameters.
 
\layout Subsection

Examples 
\layout Standard

An additional tree will be generated for the main loop and the initialization
 step.
 Each event handler has different information available to it.
 Therefore, the programs that are built for each handler have different
 grammars.
 The operators will be the set of methods that a Robocode robot has.
 We might introduce some macro-operations...
 
\layout Subsection

Functions Non-terminals
\layout Enumerate

turnRight
\layout Enumerate

turnLeft
\layout Enumerate

forward
\layout Enumerate

backward
\layout Enumerate

doneMoving
\layout Enumerate

turnRadarRight
\layout Enumerate

turnRadarLeft
\layout Enumerate

doneRotatingRadar
\layout Enumerate

turnGunRight
\layout Enumerate

turnGunLeft
\layout Enumerate

centerGun
\layout Enumerate

doneRotatingGun
\layout Enumerate

findEnemy
\layout Enumerate

lookAtEnemy
\layout Enumerate

trackEnemy
\layout Enumerate

fire 
\layout Standard

Require a Strongly-typed tree.
 
\layout Standard

Generating and executing the trees.
 
\layout Standard

Perfectly valid that a robot fight itself.
 
\layout Standard

Selection 
\layout Standard

Cross-over 
\layout Standard

Mutation.
 Probably is a valid operator since it is unlikely that all valid operations
 will exist in the initial population.
 Will likely consist of random selection of an operator in the tree and
 swapping it with a randomly selected type-compatible operator 
\layout Subsection

Execution environment 
\layout Standard

The battles can be fought in parallel and the results accumulated to enable
 the next round of selection and reproduction.
 Robocode will be slightly modified to enable it to consume battle specification
s from a JavaSpace.
 The results of the battle will then be posted back to the space.
 This will enable us to use multiple computers fight the battles and evalute
 the fitness.
 If time permits, a control test will be run without...
\layout Section

Results
\layout Standard

We plan to collect the following results.
 
\layout Standard


\begin_inset LatexCommand \BibTeX[plain]{refs}

\end_inset 


\the_end
