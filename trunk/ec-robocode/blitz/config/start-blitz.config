import com.sun.jini.start.ServiceDescriptor;
import com.sun.jini.start.NonActivatableServiceDescriptor;
import com.sun.jini.config.ConfigUtil;

// Starts up Blitz in non-activatable mode with an embedded httpd to save
// starting it up separately from the command-line.  Several people suggested
// this change:  Ussama Baggili, Olaf Bergner.
//
com.sun.jini.start {
        private static codebasePort = "8085";

        private static codebase = ConfigUtil.concat(new Object[] {
            "http://", ConfigUtil.getHostName(), ":", codebasePort, "/",
            "blitz-dl.jar"});

        // Should be updated by installer
        // JINI 2.0 libs should be in this directory
        private static jiniRoot = "/home/rbowers/Projects/jini+rio/jini2_1/lib/";

        // Should be edited to point at the directory containing the je.jar
        //
        private static dbLib = "/home/rbowers/Opus/ec-robocode/blitz/dbjava/je.jar";

        // The directory where you installed Blitz
        //
        private static blitzRoot = "/home/rbowers/Opus/ec-robocode/blitz/";

        private static blitzLib = ConfigUtil.concat(new Object[] {
                                    blitzRoot, "lib/"
                                  });

        private static separator = System.getProperty("path.separator");

        static classpath = ConfigUtil.concat(new Object[] {
            jiniRoot, "jsk-lib.jar",
            separator, jiniRoot, "sun-util.jar", separator, dbLib,
            separator, blitzLib, "blitz.jar"});

        private static config = ConfigUtil.concat(new Object[] {
            blitzRoot, "config/blitz.config"});

        private static policy = ConfigUtil.concat(new Object[] {
            blitzRoot, "config/policy.all"});

        //Reggie
        private static reggieCodebase=ConfigUtil.concat(new Object[] {
            "http://", ConfigUtil.getHostName(), ":8080/reggie-dl.jar",
            " http://", ConfigUtil.getHostName(), ":8080/jsk-dl.jar"});

        private static reggieClasspath="/home/rbowers/Projects/jini+rio/jini2_1/lib/reggie.jar";
        private static reggiePolicy="policy/policy.all";
        private static reggieConfig="config/reggie.config";

        //Mahalo
        private static mahaloCodebase=ConfigUtil.concat(new Object[] {
            "http://", ConfigUtil.getHostName(), ":8080/mahalo-dl.jar",
            " http://", ConfigUtil.getHostName(), ":8080/jsk-dl.jar"});

        private static mahaloClasspath="/home/rbowers/Projects/jini+rio/jini2_1/lib/mahalo.jar";
        private static mahaloPolicy="policy/policy.all";
        private static mahaloConfig="config/mahalo.config";

         //service descriptors   
        static serviceDescriptors = new ServiceDescriptor[] {
                //jini httpd
                 new NonActivatableServiceDescriptor(
                     "",
                     policy,
                     ConfigUtil.concat(new Object[] {jiniRoot, "tools.jar"}),
                     "com.sun.jini.tool.ClassServer",
                     new String[]{"-port",
                     "8080",
                     "-dir", 
                     "/home/rbowers/Projects/jini+rio/jini2_1/lib-dl/",
                     "-verbose"}),

                //reggie
                new NonActivatableServiceDescriptor(
                    reggieCodebase, reggiePolicy, reggieClasspath,
                    "com.sun.jini.reggie.TransientRegistrarImpl",
                    new String[] { reggieConfig }),

                //mahalo
                new NonActivatableServiceDescriptor(
                    mahaloCodebase, mahaloPolicy, mahaloClasspath,
                    "com.sun.jini.mahalo.TransientMahaloImpl",
                    new String[] { mahaloConfig }),


                 // httpd
                 new NonActivatableServiceDescriptor(
                 "",
                 policy,
                 ConfigUtil.concat(new Object[] {jiniRoot, "tools.jar"}),
                 "com.sun.jini.tool.ClassServer",
                 new String[]{"-port",
                 codebasePort,
    			 "-dir", 
                 blitzLib,
		    	 "-verbose"}),

                 // Blitz
                 new NonActivatableServiceDescriptor(
                        codebase, policy, classpath,
                        "org.dancres.blitz.remote.BlitzServiceImpl",
                         new String[] { config }
        )};
}
